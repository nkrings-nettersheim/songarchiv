"""
Django settings for heuser project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
import os

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# To get the secret information from a special file
# https://stackoverflow.com/questions/42077532/django-security-and-settings

#with open(os.path.join(BASE_DIR, 'secrets.json')) as secrets_file:
#    secrets = json.load(secrets_file)


#def get_secret(setting, secrets=secrets):
#    """Get secret setting or fail with ImproperlyConfigured"""
#    try:
#        return secrets[setting]
#    except KeyError:
#        raise ImproperlyConfigured("Set the {} setting".format(setting))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "4kq1sj_c6j"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['www.nk-streaming.de', 'songarchiv.nk-streaming.de', 'www.bheuser-songarchiv.de', 'bheuser-songarchiv.de', 'bheuser.uber.space']

# Application definition

INSTALLED_APPS = [
    #'songarchiv.apps.SongarchivConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ckeditor',
    'cookiebanner',
    'django_user_agents',
    'songarchiv',
    'dashboard',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]


ROOT_URLCONF = 'heuser.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'songarchiv.context_processors.setting_enhancement',
            ],
        },
    },
]


WSGI_APPLICATION = 'heuser.wsgi.application'

#um im Template auswerten zu können, ob dies die Produktionsumgebung ist oder die Entwicklung
#PRODUCTION = get_secret('DB_ENVIRONMENT')

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
#if get_secret('DB_ENVIRONMENT') == 'prod':
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': get_secret('DB_NAME'),
#        'USER': get_secret('DB_USER'),
#        'PASSWORD': get_secret('DB_PASSWORD'),
#        'HOST': '127.0.0.1',
#        'PORT': '3306',
#        'OPTIONS': {
#            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#        },
#    }
#}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/songarchiv/'
LOGOUT_REDIRECT_URL = '/songarchiv/'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'songarchiv/static/songarchiv/mp3/')


####################################
## cookiebanner configuration
####################################
COOKIEBANNER = {
    "title": _("Cookie Einstellungen"),
    "header_text": _("Wir nutzen zum einen Cookies die für den Betrieb der Webseite unumgänglich sind. "
                     "Weiterhin setzen wie Open Web Analytics zur Verbesserung der Nutzererfahrung auf der Webseite ein. <br>"
                     "Weitere Informationen finden sie in den Datenschutzbestimmungen"),
    "footer_text": _("Bitte Cookies akzeptieren:"),
    "footer_links": [
        {
            "title": _("Impressum"),
            "href": "/songarchiv/impressum"
        },
        {
            "title": _("Datenschutz"),
            "href": "/songarchiv/datenschutz"
        },
    ],
    "groups": [
        {
            "id": "essential",
            "name": _("Essential"),
            "description": _("Essentielle cookies erlauben die Funktion der Website."),
            "cookies": [
                {
                    "pattern": "cookiebanner",
                    "description": _("Damit dieser Hinweis nur beim ersten Aufruf erfolgt."),
                },
                {
                    "pattern": "csrftoken",
                    "description": _("Cookie hilft Cross-Site-Request-Forgery Attacken zu verhindern."),
                },
            ],
        },
        {
            "id": "analytics",
            "name": _("Analytics"),
            "optional": True,
            "cookies": [
                {
                    "pattern": "_owa_.*",
                    "description": _("Open Web Analytics Cookies zur Website Analysis. Weitere Information in der Datenschutzerklärung"),
                },
            ],
        },
    ],
}

####################################
##  CKEDITOR CONFIGURATION ##
####################################

from ckeditor.configs import DEFAULT_CONFIG

CKEDITOR_JQUERY_URL = 'https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js'

CKEDITOR_UPLOAD_PATH = 'uploads/'
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_CONFIGS = {'default':
                        {'height': 160,
                         'defaultLanguage': "de",
                         'scayt_autoStartup': True,
                         'scayt_sLang': "de_DE",
                         'coreStyles_bold': {'element': 'b', 'overrides': 'strong'},
                         'coreStyles_italic': {'element': 'i', 'overrides': 'em'},
                         'toolbar': 'Custom', 'toolbar_Custom':
                             [
                                 ['Format', 'Bold', 'Italic', 'Underline', 'BGColor', 'TextColor', 'Link', 'Scayt', ],
                             ],
                         },
                    'text':
                        {'height': 380,
                         'width': 800,
                         'defaultLanguage': "de",
                         'scayt_autoStartup': True,
                         'scayt_sLang': "de_DE",
                         'coreStyles_bold': {'element': 'b', 'overrides': 'strong'},
                         'coreStyles_italic': {'element': 'i', 'overrides': 'em'},
                         'toolbar': 'Custom', 'toolbar_Custom':
                             [
                                 ['Bold', 'Italic', 'Underline', 'BGColor', 'TextColor'],
                                 {'name': 'styles', 'items': ['Font', 'FontSize']},
                             ],
                         },
                    'chords':
                        {'height': 380,
                         'width': 800,
                         'defaultLanguage': "de",
                         'scayt_autoStartup': True,
                         'scayt_sLang': "de_DE",
                         'coreStyles_bold': {'element': 'b', 'overrides': 'strong'},
                         'coreStyles_italic': {'element': 'i', 'overrides': 'em'},
                         'toolbar': 'Custom', 'toolbar_Custom':
                             [
                                 ['Bold', 'Italic', 'Underline', 'BGColor', 'TextColor'],
                                 {'name': 'styles', 'items': ['Font', 'FontSize']},
                             ],
                         }
                    }

###################################

# This must be the last part of the settings file

try:
    from .local_settings import *
except ImportError:
    print('There is no local settings, you must be on production')


